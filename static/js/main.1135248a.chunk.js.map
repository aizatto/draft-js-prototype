{"version":3,"sources":["Decorator.tsx","Editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["styles","link","color","textDecoration","DraftHandleValue","DraftHandleCommand","KeyCode","Decorator","strategy","contentBlock","callback","contentState","findEntityRanges","character","entityKey","getEntity","getType","component","props","url","getData","react_default","a","createElement","href","style","children","isOptionKeyCommand","KeyBindingUtil","DraftJSEditor","require","default","markdownPlugin","createMarkdownPlugin","Editor","React","forwardRef","parentRef","_useState","useState","EditorState","createWithContent","defaultContent","_useState2","Object","slicedToArray","editorState","setEditorState","ref","useRef","once","useEffect","current","useImperativeHandle","content","getCurrentContent","setContent","newEditorState","onChange","handleKeyCommand","command","HEADER_ONE","HEADER_TWO","HEADER_THREE","RichUtils","toggleBlockType","HANDLED","NOT_HANDLED","keyBindingFn","e","metaKey","isOptionAndCommandKey","keyCode","DIGIT_1","DIGIT_2","DIGIT_3","getDefaultKeyBinding","plugins","decorators","stateToMarkdown","stateFromMarkdown","DEFAULT_MARKDOWN","App","markdown","setMarkdown","editorRef","textareaRef","className","Container","border","src_Editor","Button","onClick","newMarkdown","value","rows","cols","defaultValue","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1135248a.chunk.js","sourcesContent":["import React from \"react\";\nimport { ContentState, ContentBlock, CharacterMetadata } from \"draft-js\";\n\nconst styles = {\n  link: {\n    color: \"#3b5998\",\n    textDecoration: \"underline\"\n  }\n};\n\nconst Link = (props: any): JSX.Element => {\n  const { entityKey } = props;\n  const { url } = props.contentState.getEntity(entityKey).getData();\n  return (\n    <a href={url} style={styles.link}>\n      {props.children}\n    </a>\n  );\n};\n\nfunction findLinkEntities(\n  contentBlock: ContentBlock,\n  callback: any,\n  contentState: ContentState\n): void {\n  contentBlock.findEntityRanges((character: CharacterMetadata) => {\n    const entityKey = character.getEntity();\n    return (\n      entityKey !== null &&\n      contentState.getEntity(entityKey).getType() === \"LINK\"\n    );\n  }, callback);\n}\n\nconst Decorator = [\n  {\n    strategy: findLinkEntities,\n    component: Link\n  }\n];\n\nexport default Decorator;\n","import React, { useState, useRef, useEffect, useImperativeHandle } from \"react\";\nimport {\n  ContentState,\n  EditorState,\n  getDefaultKeyBinding,\n  KeyBindingUtil,\n  RichUtils\n} from \"draft-js\";\nimport Decorator from \"./Decorator\";\n\nconst { isOptionKeyCommand } = KeyBindingUtil;\n// `usesMacOSHeuristics` is apparently not released in the current version of\n// draft-js\n\nconst DraftJSEditor = require(\"draft-js-plugins-editor\").default;\nconst createMarkdownPlugin = require(\"draft-js-markdown-plugin\").default;\n\nconst markdownPlugin = createMarkdownPlugin();\n\ntype SyntheticKeyboardEvent = React.KeyboardEvent<{}>;\n\n/* eslint-disable no-unused-vars */\nenum DraftHandleValue {\n  HANDLED = \"handled\",\n  NOT_HANDLED = \"not-handled\"\n}\n\nenum DraftHandleCommand {\n  HEADER_ONE = \"header-one\",\n  HEADER_TWO = \"header-two\",\n  HEADER_THREE = \"header-three\"\n}\n\nenum KeyCode {\n  DIGIT_0 = 48,\n  DIGIT_1 = 49,\n  DIGIT_2 = 50,\n  DIGIT_3 = 51,\n  DIGIT_9 = 57,\n  A = 65,\n  Z = 90\n}\n/* eslint-enable -no-unused-vars */\n\n/**\n * DraftJS doesn't register the two at the same time\n */\nfunction isOptionAndCommandKey(e: SyntheticKeyboardEvent): boolean {\n  return isOptionKeyCommand(e) && e.metaKey;\n}\n\nconst Editor = React.forwardRef(\n  (props: { defaultContent: ContentState }, parentRef) => {\n    const [editorState, setEditorState] = useState(() =>\n      //    EditorState.createEmpty()\n      EditorState.createWithContent(props.defaultContent)\n    );\n    const ref = useRef(null);\n    const once = useRef(false);\n    useEffect(() => {\n      if (ref && ref.current && once.current === false) {\n        //      ref.current.focus();\n        once.current = true;\n      }\n    });\n\n    useImperativeHandle(\n      parentRef,\n      () => ({\n        content: () => {\n          return editorState.getCurrentContent();\n        },\n        setContent: (contentState: ContentState) => {\n          const newEditorState = EditorState.createWithContent(contentState);\n\n          setEditorState(newEditorState);\n        }\n      }),\n      [editorState]\n    );\n\n    const onChange = (newEditorState: EditorState): void => {\n      // how do I change the markdown?\n      setEditorState(newEditorState);\n    };\n\n    const keyBindingFn = (e: SyntheticKeyboardEvent): string | null => {\n      if (isOptionAndCommandKey(e)) {\n        switch (e.keyCode) {\n          case KeyCode.DIGIT_1:\n            return DraftHandleCommand.HEADER_ONE;\n\n          case KeyCode.DIGIT_2:\n            return DraftHandleCommand.HEADER_TWO;\n\n          case KeyCode.DIGIT_3:\n            return DraftHandleCommand.HEADER_THREE;\n\n          default:\n            return getDefaultKeyBinding(e);\n        }\n      }\n\n      return getDefaultKeyBinding(e);\n    };\n\n    const handleKeyCommand = (\n      command: DraftHandleCommand\n    ): DraftHandleValue => {\n      switch (command) {\n        case DraftHandleCommand.HEADER_ONE:\n        case DraftHandleCommand.HEADER_TWO:\n        case DraftHandleCommand.HEADER_THREE:\n          setEditorState(RichUtils.toggleBlockType(editorState, command));\n          return DraftHandleValue.HANDLED;\n\n        default:\n          return DraftHandleValue.NOT_HANDLED;\n      }\n    };\n\n    return (\n      <DraftJSEditor\n        ref={ref}\n        editorState={editorState}\n        onChange={onChange}\n        handleKeyCommand={handleKeyCommand}\n        keyBindingFn={keyBindingFn}\n        plugins={[markdownPlugin]}\n        decorators={Decorator}\n      />\n    );\n  }\n);\nexport default Editor;\n","import React, { useRef, useState } from \"react\";\nimport { Container, Button } from \"reactstrap\";\nimport { ContentState } from \"draft-js\";\nimport Editor from \"./Editor\";\n\n// These are not typescript compatible yet\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst { stateToMarkdown } = require(\"draft-js-export-markdown\");\nconst { stateFromMarkdown } = require(\"draft-js-import-markdown\");\n\ninterface EditorRef {\n  content: () => ContentState;\n  setContent: (content: ContentState) => void;\n}\n\nconst DEFAULT_MARKDOWN = `\n[test](https://www.example.com/)\n`;\n\nfunction App(): JSX.Element {\n  const [markdown, setMarkdown] = useState(DEFAULT_MARKDOWN);\n  const editorRef = useRef<EditorRef>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const onClick = (): void => {\n    if (!editorRef || !editorRef.current) {\n      return;\n    }\n\n    const newMarkdown = stateToMarkdown(editorRef.current.content());\n    setMarkdown(newMarkdown);\n\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.value = newMarkdown;\n    }\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    if (!editorRef || !editorRef.current) {\n      return;\n    }\n\n    const newMarkdown = e.target.value;\n    setMarkdown(newMarkdown);\n    const content = stateFromMarkdown(newMarkdown);\n    editorRef.current.setContent(content);\n  };\n\n  const defaultContent = stateFromMarkdown(markdown);\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        Hello World\n        <div style={{ border: \"1px solid #000\" }}>\n          <Editor ref={editorRef} defaultContent={defaultContent} />\n        </div>\n        <Button onClick={onClick}>To Markdown</Button>\n        <div>\n          <textarea\n            rows={40}\n            cols={100}\n            ref={textareaRef}\n            defaultValue={markdown}\n            onChange={onChange}\n          />\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}