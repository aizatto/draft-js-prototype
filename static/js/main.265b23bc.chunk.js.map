{"version":3,"sources":["Editor.tsx","AppEditor.tsx","AppPluginEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DraftHandleValue","DraftHandleCommand","KeyCode","isOptionKeyCommand","KeyBindingUtil","Editor","React","forwardRef","_","parentRef","_useState","useState","EditorState","createEmpty","_useState2","Object","slicedToArray","editorState","setEditorState","ref","useRef","once","useEffect","current","focus","useImperativeHandle","content","getCurrentContent","setContent","contentState","newEditorState","createWithContent","react_default","a","createElement","Draft","onChange","handleKeyCommand","command","HEADER_ONE","HEADER_TWO","HEADER_THREE","RichUtils","toggleBlockType","HANDLED","NOT_HANDLED","keyBindingFn","e","metaKey","isOptionAndCommandKey","keyCode","DIGIT_1","DIGIT_2","DIGIT_3","getDefaultKeyBinding","stateToMarkdown","require","stateFromMarkdown","App","markdown","setMarkdown","editorRef","textareaRef","className","Container","style","border","src_Editor","Button","onClick","newMarkdown","value","defaultValue","target","emptyEditorState","plugins","createMarkdownPlugin","AppEditor","_useState3","_useState4","lib_default","readOnly","AppPluginEditor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.265b23bc.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useImperativeHandle } from \"react\";\nimport {\n  ContentState,\n  Editor as DraftJSEditor,\n  EditorState,\n  getDefaultKeyBinding,\n  KeyBindingUtil,\n  RichUtils\n} from \"draft-js\";\n\nconst { isOptionKeyCommand } = KeyBindingUtil;\n// `usesMacOSHeuristics` is apparently not released in the current version of\n// draft-js\n\ntype SyntheticKeyboardEvent = React.KeyboardEvent<{}>;\n\n/* eslint-disable no-unused-vars */\nenum DraftHandleValue {\n  HANDLED = \"handled\",\n  NOT_HANDLED = \"not-handled\"\n}\n\nenum DraftHandleCommand {\n  HEADER_ONE = \"header-one\",\n  HEADER_TWO = \"header-two\",\n  HEADER_THREE = \"header-three\"\n}\n\nenum KeyCode {\n  DIGIT_0 = 48,\n  DIGIT_1 = 49,\n  DIGIT_2 = 50,\n  DIGIT_3 = 51,\n  DIGIT_9 = 57,\n  A = 65,\n  Z = 90\n}\n/* eslint-enable -no-unused-vars */\n\n/**\n * DraftJS doesn't register the two at the same time\n */\nfunction isOptionAndCommandKey(e: SyntheticKeyboardEvent): boolean {\n  return isOptionKeyCommand(e) && e.metaKey;\n}\n\nconst Editor = React.forwardRef((_, parentRef) => {\n  const [editorState, setEditorState] = useState(() =>\n    EditorState.createEmpty()\n  );\n  const ref = useRef<DraftJSEditor>(null);\n  const once = useRef(false);\n  useEffect(() => {\n    if (ref && ref.current && once.current === false) {\n      ref.current.focus();\n      once.current = true;\n    }\n  });\n\n  useImperativeHandle(\n    parentRef,\n    () => ({\n      content: () => {\n        return editorState.getCurrentContent();\n      },\n      setContent: (contentState: ContentState) => {\n        const newEditorState = EditorState.createWithContent(contentState);\n\n        setEditorState(newEditorState);\n      }\n    }),\n    [editorState]\n  );\n\n  const onChange = (newEditorState: EditorState): void => {\n    setEditorState(newEditorState);\n  };\n\n  const keyBindingFn = (e: SyntheticKeyboardEvent): string | null => {\n    if (isOptionAndCommandKey(e)) {\n      switch (e.keyCode) {\n        case KeyCode.DIGIT_1:\n          return DraftHandleCommand.HEADER_ONE;\n\n        case KeyCode.DIGIT_2:\n          return DraftHandleCommand.HEADER_TWO;\n\n        case KeyCode.DIGIT_3:\n          return DraftHandleCommand.HEADER_THREE;\n\n        default:\n          return getDefaultKeyBinding(e);\n      }\n    }\n\n    return getDefaultKeyBinding(e);\n  };\n\n  const handleKeyCommand = (command: DraftHandleCommand): DraftHandleValue => {\n    switch (command) {\n      case DraftHandleCommand.HEADER_ONE:\n      case DraftHandleCommand.HEADER_TWO:\n      case DraftHandleCommand.HEADER_THREE:\n        setEditorState(RichUtils.toggleBlockType(editorState, command));\n        return DraftHandleValue.HANDLED;\n\n      default:\n        return DraftHandleValue.NOT_HANDLED;\n    }\n  };\n\n  return (\n    <DraftJSEditor\n      ref={ref}\n      editorState={editorState}\n      onChange={onChange}\n      handleKeyCommand={handleKeyCommand}\n      keyBindingFn={keyBindingFn}\n    />\n  );\n});\nexport default Editor;\n","import React, { useRef, useState } from \"react\";\nimport { Container, Button } from \"reactstrap\";\nimport { ContentState } from \"draft-js\";\nimport Editor from \"./Editor\";\n\n// These are not typescript compatible yet\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst { stateToMarkdown } = require(\"draft-js-export-markdown\");\nconst { stateFromMarkdown } = require(\"draft-js-import-markdown\");\n\ninterface EditorRef {\n  content: () => ContentState;\n  setContent: (content: ContentState) => void;\n}\n\nfunction App(): JSX.Element {\n  const [markdown, setMarkdown] = useState(\"\");\n  const editorRef = useRef<EditorRef>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const onClick = (): void => {\n    if (!editorRef || !editorRef.current) {\n      return;\n    }\n\n    const newMarkdown = stateToMarkdown(editorRef.current.content());\n    setMarkdown(newMarkdown);\n\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.value = newMarkdown;\n    }\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    if (!editorRef || !editorRef.current) {\n      return;\n    }\n\n    const newMarkdown = e.target.value;\n    setMarkdown(newMarkdown);\n    const content = stateFromMarkdown(newMarkdown);\n    editorRef.current.setContent(content);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        Hello World\n        <div style={{ border: \"1px solid #000\" }}>\n          <Editor ref={editorRef} />\n        </div>\n        <Button onClick={onClick}>To Markdown</Button>\n        <div>\n          <textarea\n            ref={textareaRef}\n            defaultValue={markdown}\n            onChange={onChange}\n          />\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useRef, useState } from \"react\";\nimport { Container, Button } from \"reactstrap\";\n\n// @ts-ignore\nimport Editor from \"draft-js-plugins-editor\";\n// @ts-ignore\nimport createMarkdownPlugin from \"@aizatto/draft-js-markdown-plugin\";\nimport { EditorState } from \"draft-js\";\n\n// These are not typescript compatible yet\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst { stateToMarkdown } = require(\"draft-js-export-markdown\");\nconst { stateFromMarkdown } = require(\"draft-js-import-markdown\");\n\n// so it doesn't get called all the time\nconst emptyEditorState = EditorState.createEmpty();\nconst plugins = [createMarkdownPlugin()];\n\nfunction AppEditor(): JSX.Element {\n  const [editorState, setEditorState] = useState(emptyEditorState);\n  const [markdown, setMarkdown] = useState(\"\");\n\n  return (\n    <div>\n      <div style={{ border: \"1px solid #000\" }}>\n        <Editor\n          editorState={editorState}\n          onChange={(editorState: EditorState) => {\n            // console.log(editorState.getCurrentContent());\n            setEditorState(editorState);\n            const newMarkdown = stateToMarkdown(\n              editorState.getCurrentContent()\n            );\n            setMarkdown(newMarkdown);\n          }}\n          plugins={plugins}\n        />\n      </div>\n      <textarea value={markdown} readOnly />\n    </div>\n  );\n}\n\nexport default AppEditor;\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\nimport AppEditor from \"./AppEditor\";\nimport AppPluginEditor from \"./AppPluginEditor\";\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <Container className=\"pt-3\">\n        <h1>Standard Editor</h1>\n        <AppEditor />\n        <h1>Plugin Editor</h1>\n        <AppPluginEditor />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}